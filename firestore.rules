rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for a custom claim `isAdmin` on the user's auth token.
      // This is more secure than checking a document field.
      // You can set this using the Firebase Admin SDK.
      // For now, we will check the document, but this is the recommended path.
      return isAuth() && get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isVle() {
      return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    
    // --- Global Admin Override ---
    // A simplified rule to grant admins full access to everything.
    // This helps with batch operations like the "Reset Data" feature.
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- Collection-Specific Rules ---

    // Users (Customers)
    match /users/{userId} {
      // Users can create their own account.
      allow create: if isOwner(userId);
      // Users can read their own profile.
      allow read: if isOwner(userId);
      // Users can update their own profile. The transaction logic in the app
      // is responsible for ensuring wallet debits are legitimate. 
      // All wallet *credits* are handled by a secure admin-only process.
      allow update: if isOwner(userId);
      // Only admins can delete user accounts.
      allow delete: if isAdmin();
    }
    
    // Village-Level Entrepreneurs (VLEs)
    match /vles/{vleId} {
      // VLEs can create their own account.
      allow create: if isOwner(vleId);
      // VLEs can read their own profile.
      allow read: if isOwner(vleId);
      // VLEs can update their own profile.
      allow update: if isOwner(vleId);
      // Only admins can delete VLE accounts.
      allow delete: if isAdmin();
    }
    
    // Services can be read by any logged-in user, but only modified by admins.
    match /services/{serviceId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
       // Any authenticated user can receive a notification.
       allow create: if isAuth();
       // You can only read or update your own notifications.
       allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    // Tasks are the core of the app and have detailed rules.
    match /tasks/{taskId} {
      // Any authenticated user can create a task.
      allow create: if isAuth();
      
      // You can read a task if you created it, are assigned to it, or are an admin.
      allow read: if isOwner(resource.data.creatorId) || 
                   isOwner(resource.data.assignedVleId);
                   
      // Updating a task has several conditions.
      allow update: if 
        // The creator can update it to add a complaint, feedback, or more documents.
        (isOwner(resource.data.creatorId) && (
            request.resource.data.complaint != resource.data.complaint ||
            request.resource.data.feedback != resource.data.feedback ||
            request.resource.data.documents != resource.data.documents
        )) ||
        // The assigned VLE can update it with an acknowledgement number or final certificate.
        (isOwner(resource.data.assignedVleId));
    }

    // Camps can be read by anyone logged in, but only managed by admins.
    match /camps/{campId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    // VLEs can suggest camps.
    match /campSuggestions/{suggestionId} {
      allow create: if isVle();
      allow read, delete: if isAdmin();
    }

    // Payment requests can be created by any user but only managed by admins.
    match /paymentRequests/{reqId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
  }
}
