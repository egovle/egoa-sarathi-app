
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isVle() {
        return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }

    // --- Collection Rules ---

    // Users collection
    match /users/{userId} {
      allow read, create: if isOwner(userId) || isAdmin();
      allow update: if isAdmin() || (isOwner(userId) &&
                      // Allow user to update their own non-critical info
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'mobile', 'location', 'bankAccounts', 'walletBalance']) &&
                      // User cannot give themselves more money
                      request.resource.data.walletBalance <= resource.data.walletBalance &&
                      // User cannot change their admin status
                      request.resource.data.isAdmin == resource.data.isAdmin);
      allow delete: if isAdmin();
    }
    
    // VLEs collection
    match /vles/{vleId} {
      allow read, create: if isOwner(vleId) || isAdmin();
      allow update: if isAdmin() || (isOwner(vleId) &&
                      // Allow VLE to update their own non-critical info
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'mobile', 'location', 'bankAccounts', 'available', 'walletBalance']) &&
                      // VLE cannot give themselves more money
                      request.resource.data.walletBalance <= resource.data.walletBalance &&
                      // VLE cannot change their admin status or approval status
                      request.resource.data.isAdmin == resource.data.isAdmin &&
                      request.resource.data.status == resource.data.status);
      allow delete: if isAdmin();
    }
    
    // Services collection
    match /services/{serviceId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
       allow create: if isAuth();
       allow read, update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Tasks collection
    function isCreator(task) {
      return isOwner(task.creatorId);
    }
    
    function isAssignedVle(task) {
        return 'assignedVleId' in task && task.assignedVleId != null && isOwner(task.assignedVleId);
    }

    match /tasks/{taskId} {
      // User can create a task for themselves
      allow create: if isAuth() && isOwner(request.resource.data.creatorId);
      allow read: if isCreator(resource.data) || isAssignedVle(resource.data) || isAdmin();

      function creatorCanUpdate() {
        return isCreator(resource.data) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['complaint', 'feedback', 'documents', 'status', 'history']);
      }

      function vleCanUpdate() {
        return isAssignedVle(resource.data) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'acknowledgementNumber', 'finalCertificate', 'history']);
      }
      
      allow update: if creatorCanUpdate() || vleCanUpdate() || isAdmin();
      allow delete: if isAdmin();
    }

    // Camps collection
    match /camps/{campId} {
      allow read: if isAuth();
      allow create, update, delete: if isAdmin();
    }
    
    // Camp Suggestions collection
    match /campSuggestions/{suggestionId} {
      allow create: if isVle();
      allow read, delete: if isAdmin();
    }

    // Payment Requests collection
    match /paymentRequests/{reqId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
  }
}
