rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCustomer(userId) {
    	return exists(/databases/$(database)/documents/users/$(userId));
    }

    function isVle(userId) {
      return exists(/databases/$(database)/documents/vles/$(userId));
    }

    function isAdmin() {
      // Check if the requesting user exists in the 'vles' collection and has the 'isAdmin' flag set to true.
      return isAuthenticated() && get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isGovernment(userId) {
    	return exists(/databases/$(database)/documents/government/$(userId));
    }

    // --- User Collections ---
    match /users/{userId} {
      // Customers can read/write their own profile. Admins can read any profile.
      allow read, update: if (isOwner(userId) || isAdmin());
      // Anyone can create a user profile (during registration)
      allow create: if true;
    }

    match /vles/{vleId} {
      // VLEs can read/write their own profile. Admins can manage all VLEs.
      allow read, update: if (isOwner(vleId) || isAdmin());
      // Anyone can create a VLE profile (during registration, pending approval)
      allow create: if true;
    }
    
    match /government/{govId} {
    	// Government users can read/write their own profile. Admins can read.
      allow read, update: if (isOwner(govId) || isAdmin());
      // Anyone can create a government profile (during registration)
      allow create: if true;
    }

    // --- Core Data ---
    match /tasks/{taskId} {
      // Admins have full access.
      // The user who created the task or the VLE assigned to it can read/update it.
      allow read, update: if isAdmin() || 
                           (isAuthenticated() && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.assignedVleId));
      // Any authenticated user can create a task.
      allow create: if isAuthenticated();
    }
    
    match /services/{serviceId} {
      // Services list is public for anyone to read. Only admins can modify.
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /camps/{campId} {
      // Camp info is public. Only admins can create/update/delete.
      // VLEs can update their own status in the 'assignedVles' array.
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isVle(request.auth.uid));
    }
    
    match /campSuggestions/{suggestionId} {
    	// VLEs and Government users can create suggestions.
      allow create: if (isVle(request.auth.uid) || isGovernment(request.auth.uid));
      // Admins can read and delete suggestions.
      allow read, delete: if isAdmin();
    }

    // --- Communication & Notifications ---
    match /notifications/{notificationId} {
      // Users can only read and delete their own notifications.
      allow read, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      // Notifications are created by server-side logic (actions.ts), so we trust those writes.
      allow create: if true;
    }
    
    match /taskChats/{taskId}/messages/{messageId} {
      // Only participants of the task (creator, assigned VLE) or an admin can read/write chat.
      let task = get(/databases/$(database)/documents/tasks/$(taskId));
      allow read, create: if isAdmin() || (isAuthenticated() && (request.auth.uid == task.data.creatorId || request.auth.uid == task.data.assignedVleId));
    }
    
    match /groupChats/mainRoom/messages/{messageId} {
    	// Only Admins and VLEs can access the main group chat.
      allow read, create: if (isAdmin() || isVle(request.auth.uid));
    }

    match /campChats/{campId}/messages/{messageId} {
    	// Only assigned VLEs for that camp and admins can chat.
      let camp = get(/databases/$(database)/documents/camps/$(campId));
      let isAssigned = request.auth.uid in camp.data.assignedVles.map(v => v.vleId);
      allow read, create: if isAdmin() || (isVle(request.auth.uid) && isAssigned);
    }
    
    // --- Other Collections ---
    match /paymentRequests/{reqId} {
      // Users can create their own payment requests.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      // Admins can read/update all requests.
      allow read, update: if isAdmin();
    }
    
    match /trainingMaterials/{materialId} {
    	// VLEs and admins can read materials.
    	allow read: if isVle(request.auth.uid) || isAdmin();
      // Only admins can write/delete materials.
      allow write, delete: if isAdmin();
    }
  }
}