
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() { return request.auth != null; }
    function isOwner(userId) { return isAuth() && request.auth.uid == userId; }
    function isAdmin() { 
      return isAuth() && get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true; 
    }
    function isVle(userId) { return isAuth() && exists(/databases/$(database)/documents/vles/$(userId)); }

    // --- Global Admin Override for full access ---
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- Collection-Specific Rules for Non-Admins ---

    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId);
      // Allow owners to update their own non-critical info.
      // Wallet balance can only be decreased by the owner (for payments), not increased.
      allow update: if isOwner(userId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['name', 'mobile', 'location', 'bankAccounts', 'walletBalance']) &&
                       (request.resource.data.walletBalance <= resource.data.walletBalance);
    }
    
    match /vles/{vleId} {
      allow create: if isOwner(vleId);
      allow read: if isOwner(vleId);
      // Allow VLEs to update their own non-critical info, including availability.
      allow update: if isOwner(vleId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['name', 'mobile', 'location', 'bankAccounts', 'available', 'walletBalance']) &&
                       (request.resource.data.walletBalance <= resource.data.walletBalance);
    }
    
    match /services/{serviceId} {
      allow read: if isAuth();
    }
    
    match /notifications/{notificationId} {
       allow create: if isAuth();
       allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    match /tasks/{taskId} {
      allow create: if isAuth(); 
      allow read: if isOwner(resource.data.creatorId) || isOwner(resource.data.assignedVleId);
      // Allow specific updates by the assigned VLE or the task creator
      allow update: if 
        (isOwner(resource.data.assignedVleId) && 
            (
                request.resource.data.status == 'Awaiting Documents' || 
                request.resource.data.status == 'In Progress' ||
                request.resource.data.status == 'Completed'
            )
        ) ||
        (isOwner(resource.data.creatorId) && 
            (
                request.resource.data.complaint != resource.data.complaint || 
                request.resource.data.feedback != resource.data.feedback ||
                request.resource.data.documents.size() >= resource.data.documents.size() || // Can add or re-upload docs
                request.resource.data.status == 'Unassigned' || // Status change on payment
                request.resource.data.status == 'Assigned' // Status change after uploading more docs
            )
        );
    }

    match /camps/{campId} {
      allow read: if isAuth();
    }
    
    match /campSuggestions/{suggestionId} {
      allow create: if isVle(request.auth.uid);
      allow read: if isAuth();
    }

    match /paymentRequests/{reqId} {
      allow create: if isAuth();
      allow read: if isAdmin();
    }
  }
}
