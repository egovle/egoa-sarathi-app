rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAdmin() {
      // Check if the user exists in the 'vles' collection and has the isAdmin flag set to true.
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // USERS (Customers)
    match /users/{userId} {
      // Allow read by self or an admin.
      allow read: if request.auth.uid == userId || isAdmin();
      
      // Allow a user to update their own profile, but not protected fields like wallet or role.
      allow update: if request.auth.uid == userId &&
                       !request.resource.data.diff(resource.data).affectedKeys()
                           .hasAny(['walletBalance', 'isAdmin', 'role']);
                           
      // Allow a user to DECREASE their own wallet balance (for making payments).
      allow update: if request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['walletBalance']) &&
                       request.resource.data.walletBalance < resource.data.walletBalance;
      
      // Nobody can create or delete user profiles directly through the app.
      allow create, delete: if false;
    }

    // VLES (Village Level Entrepreneurs)
    match /vles/{vleId} {
      // Allow read by self or an admin.
      allow read: if request.auth.uid == vleId || isAdmin();
      
      // Allow a VLE to update their own profile, but not protected fields.
      allow update: if request.auth.uid == vleId &&
                       !request.resource.data.diff(resource.data).affectedKeys()
                           .hasAny(['walletBalance', 'status', 'isAdmin', 'role']);
                           
      // Allow a VLE to DECREASE their own wallet balance (for making payments).
      allow update: if request.auth.uid == vleId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['walletBalance']) &&
                       request.resource.data.walletBalance < resource.data.walletBalance;
      
      // Allow an admin to update a VLE's status (for approval) or wallet (for adding funds).
      allow update: if isAdmin() &&
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) ||
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['walletBalance']));
                        
      // Nobody can create or delete VLE profiles directly through the app.
      allow create, delete: if false;
    }

    // TASKS
    match /tasks/{taskId} {
      function isCreator() {
        return request.auth.uid == resource.data.creatorId;
      }
      function isAssignedVle() {
        return resource.data.assignedVleId != null && request.auth.uid == resource.data.assignedVleId;
      }

      // Read access for the task creator, the assigned VLE, or an admin.
      allow read: if isCreator() || isAssignedVle() || isAdmin();
      
      // Any authenticated user can create a task, as long as they set themselves as the creator.
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.creatorId;

      // Granular update rules for different roles and task statuses.
      allow update: if 
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['assignedVleId', 'assignedVleName', 'status', 'history', 'rate'])) ||
        (isAssignedVle() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'acknowledgementNumber', 'history', 'finalCertificate'])) ||
        (isCreator() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['documents', 'status', 'history', 'complaint', 'feedback']));
    }
    
    // SERVICES: Readable by all logged-in users, writable only by admins.
    match /services/{serviceId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    
    // CAMPS: Readable by all logged-in users, writable only by admins.
    match /camps/{campId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    
    // CAMP SUGGESTIONS: VLEs create, Admins read/delete.
    match /campSuggestions/{suggestionId} {
      allow read, delete: if isAdmin();
      allow create: if request.auth.uid != null;
    }
    
    // NOTIFICATIONS: User-specific access.
    match /notifications/{notificationId} {
      allow read, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    // PAYMENT REQUESTS: Users create, admins read/update.
    match /paymentRequests/{reqId} {
      allow read, update: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}