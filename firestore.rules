
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isVle() {
      // Any user with a document in the 'vles' collection is a VLE.
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    
    // --- Collection Rules ---

    // USERS: Customers can manage their own profile, but not their wallet. Admins can do anything.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      // Allow user to update their own profile, but NOT their wallet.
      allow update: if isOwner(userId) && !("walletBalance" in request.resource.data);
      
      // Allow admin to update anything on a user's profile.
      allow update: if isAdmin();
      
      // Allow creation during registration.
      allow create: if request.auth != null;
      allow delete: if isAdmin();
    }
    
    // VLES: VLEs can manage their own profile, but not their wallet or approval status. Admins can do anything.
    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin();
      
      // Allow VLE to update their own profile, but NOT wallet or status.
      allow update: if isOwner(vleId) && !("walletBalance" in request.resource.data) && !("status" in request.resource.data);
      
      // Allow admin to update anything on a VLE's profile.
      allow update: if isAdmin();

      // Allow creation during registration.
      allow create: if request.auth != null;
      allow delete: if isAdmin();
    }
    
    // SERVICES: Publicly readable, but only writable by admins.
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // NOTIFICATIONS: Users can manage their own notifications.
    match /notifications/{notificationId} {
       allow create: if request.auth != null; // Created by server logic/actions
       allow read, update, delete: if isOwner(resource.data.userId);
    }

    // TASKS: Permissions based on role (creator, assigned VLE, admin).
    match /tasks/{taskId} {
      allow create: if request.auth != null;
      
      allow read: if isOwner(resource.data.creatorId) 
                     || isOwner(resource.data.assignedVleId) 
                     || isAdmin();
                     
      allow update: if isOwner(resource.data.assignedVleId) 
                       || isAdmin()
                       || isOwner(resource.data.creatorId); // App logic should control which fields can be updated by customer.
    }
    
    // CAMPS: Publicly readable. Writable by admins. VLEs can suggest.
    match /camps/{campId} {
        // Any authenticated user can see camp details.
        allow read: if request.auth != null;
        
        // Allow VLEs to CREATE camps, but only if they are suggestions.
        // Allow Admins to create any camp.
        allow create: if (isVle() && request.resource.data.status == 'Suggested') || isAdmin();
        
        // Only admins can update and delete camps.
        allow update, delete: if isAdmin();
    }
    
    // PAYMENT REQUESTS: Users create their own, admins manage them.
    match /paymentRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isAdmin();
    }
  }
}
