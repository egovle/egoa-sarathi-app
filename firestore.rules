
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user document exists in the 'vles' collection and has the isAdmin flag set to true.
      return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    // RULES
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
    }

    match /vles/{vleId} {
      allow read, update: if isOwner(vleId) || isAdmin();
      allow create: if isOwner(vleId);
    }

    match /tasks/{taskId} {
      // Any authenticated user can create a task.
      allow create: if isAuth();

      // Read/update access for the task creator, the assigned VLE, or an admin.
      allow read, update: if isAuth() && (
        isOwner(resource.data.creatorId) ||
        (resource.data.assignedVleId != null && isOwner(resource.data.assignedVleId)) ||
        isAdmin()
      );
    }
    
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /camps/{campId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
    
    match /campSuggestions/{suggestionId} {
      allow create: if isAuth();
      allow read, delete: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuth();
    }
    
    match /paymentRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isAdmin();
    }
  }
}
