
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Allow update by admin, or by the owner if they are not giving themselves money.
      // This allows transactions that debit the wallet to succeed.
      allow update: if isAdmin() || (isOwner(userId) &&
        (!('walletBalance' in request.resource.data) || request.resource.data.walletBalance <= resource.data.walletBalance));
      allow create, delete: if false;
    }

    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin();
       // Allow update by admin, or by the VLE if they are not giving themselves money.
      allow update: if isAdmin() || (isOwner(vleId) &&
        (!('walletBalance' in request.resource.data) || request.resource.data.walletBalance <= resource.data.walletBalance));
      allow create, delete: if false;
    }

    match /tasks/{taskId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow read: if isAdmin() || request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.assignedVleId;
      allow update: if isAdmin() || request.auth.uid == resource.data.assignedVleId || request.auth.uid == resource.data.creatorId;
    }

    match /services/{sId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /notifications/{nId} {
      allow read, write, create: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }
    match /camps/{cId} {
      allow read: if request.auth != null;
      allow write: if isAdmin() || exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    match /campSuggestions/{csId} {
      allow read, delete: if isAdmin();
      allow create: if exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    match /paymentRequests/{prId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isAdmin();
    }
  }
}
