rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user document exists in the 'vles' collection and has the isAdmin flag set to true.
      let vlePath = /databases/$(database)/documents/vles/$(request.auth.uid);
      return exists(vlePath) && get(vlePath).data.isAdmin == true;
    }
    
    // --- User & VLE Profiles ---
    match /users/{userId} {
      // Admins can read/write any user profile. Users can read/write their own.
      allow get, update: if isAdmin() || isOwner(userId);
      // Only admins can list all users.
      allow list: if isAdmin();
      // A user can create their own profile on signup.
      allow create: if isOwner(userId);
    }

    match /vles/{vleId} {
      // Admins can read/write any VLE profile. VLEs can read/write their own.
      allow get, update: if isAdmin() || isOwner(vleId);
      // Only admins can list all VLEs.
      allow list: if isAdmin();
      // A VLE can create their own profile on signup.
      allow create: if isOwner(vleId);
    }

    // --- Core Data Collections ---
    match /tasks/{taskId} {
      // Any authenticated user can create a task.
      allow create: if request.auth != null;

      // Rules for reading and updating tasks are combined because the permissions are the same.
      // - Admins can read/update any task.
      // - Users can read/update tasks they created.
      // - VLEs can read/update tasks assigned to them.
      // This single 'read' rule covers both 'get' and 'list' operations because Firestore can
      // verify client queries (e.g., `where('creatorId', '==', uid)`) against these conditions.
      allow read, update: if request.auth != null && (
        isAdmin() ||
        isOwner(resource.data.creatorId) ||
        (resource.data.assignedVleId != null && isOwner(resource.data.assignedVleId))
      );
    }
    
    match /services/{serviceId} {
      // Any authenticated user can read the list of available services.
      allow read: if request.auth != null;
      // Only admins can add, edit, or remove services.
      allow write: if isAdmin();
    }
    
    match /camps/{campId} {
        // Any authenticated user can read camp details.
        allow read: if request.auth != null;
        // Only admins can create, update, or delete camps.
        allow write: if isAdmin();
    }
    
    match /campSuggestions/{suggestionId} {
      // Any authenticated user can create a camp suggestion.
      allow create: if request.auth != null;
      // Only admins can read or delete suggestions.
      allow read, delete: if isAdmin();
    }
    
    // --- Notifications & Payment Requests ---
    match /notifications/{notificationId} {
      // A user can only read or write their own notifications.
      // The client query `where('userId', '==', uid)` is enforced by this rule.
      allow read, write: if isOwner(resource.data.userId);
      // The app's server logic handles creating notifications for the correct user.
      allow create: if request.auth != null;
    }
    
    match /paymentRequests/{reqId} {
      // A user can only create a payment request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      // Only admins can read the list of requests and approve them.
      allow read, update: if isAdmin();
    }
  }
}