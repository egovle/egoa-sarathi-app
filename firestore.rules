
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isVle() {
      return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    
    // Default deny all reads/writes and grant full access to admins
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- Granular Rules for Non-Admins ---

    // USERS: Can read/create their own profile and update specific fields.
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'mobile', 'location', 'bankAccounts']);
    }
    
    // VLES: Can read/create their own profile and update specific fields.
    match /vles/{vleId} {
      allow read, create: if isOwner(vleId);
      allow update: if isOwner(vleId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'mobile', 'location', 'available', 'bankAccounts']);
    }

    // SERVICES: Any authenticated user can read the list of services.
    match /services/{serviceId} {
      allow read: if isAuth();
    }
    
    // NOTIFICATIONS: Can create, read, and delete their own notifications.
    match /notifications/{notificationId} {
       allow create: if isAuth();
       allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    // TASKS: Granular permissions for tasks
    match /tasks/{taskId} {
      allow read: if isOwner(resource.data.creatorId) || isOwner(resource.data.assignedVleId);
      allow create: if isAuth();
      allow update: if isOwner(resource.data.assignedVleId) || 
                       (isOwner(resource.data.creatorId) && 
                         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['complaint', 'feedback', 'documents', 'status']))
                       );
    }

    // CAMPS: Any authenticated user can read.
    match /camps/{campId} {
      allow read: if isAuth();
    }
    
    // CAMP SUGGESTIONS: Only VLEs can create.
    match /campSuggestions/{suggestionId} {
      allow create: if isVle();
      allow read, delete: if isAdmin();
    }

    // PAYMENT REQUESTS: Authenticated users can create their own.
    match /paymentRequests/{reqId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow read: if isOwner(resource.data.userId);
    }
  }
}
