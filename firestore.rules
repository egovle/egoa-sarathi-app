
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles and ownership
    function isAdmin(userId) {
      // Check if the user exists in the 'vles' collection and their 'isAdmin' field is true.
      return exists(/databases/$(database)/documents/vles/$(userId)) &&
             get(/databases/$(database)/documents/vles/$(userId)).data.isAdmin == true;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can only manage their own profile
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isOwner(userId);
    }

    // VLEs can manage their own profile, Admins can manage any VLE profile
    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin(request.auth.uid);
      allow update: if isOwner(vleId) || isAdmin(request.auth.uid);
      allow create: if isOwner(vleId);
    }
    
    // Services can be read by anyone, but only written by admins
    match /services/{serviceId} {
        allow read: if request.auth != null;
        allow write: if isAdmin(request.auth.uid);
    }
    
    // Tasks have complex rules based on role and task status
    match /tasks/{taskId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || 
                     isOwner(resource.data.creatorId) || 
                     (resource.data.assignedVleId != null && isOwner(resource.data.assignedVleId)));

      allow create: if request.auth != null && isOwner(request.resource.data.creatorId);

      allow update: if request.auth != null && (
        // Admin can do anything
        isAdmin(request.auth.uid) || 
        // Creator can update complaint or add documents
        (isOwner(resource.data.creatorId) && (request.resource.data.complaint != resource.data.complaint || request.resource.data.documents.size() > resource.data.documents.size())) ||
        // Assigned VLE can update status, history, etc.
        (isOwner(resource.data.assignedVleId) && request.resource.data.creatorId == resource.data.creatorId)
      );
    }
    
    // Notifications can only be read/deleted by the target user.
    // Creation is open to any authenticated user due to client-side logic.
    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if request.auth != null;
    }

    // Camps can be read by any authenticated user, written by admins.
    match /camps/{campId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid);
    }

    // Camp suggestions can be created by authenticated users, read/deleted by admins.
    match /campSuggestions/{suggestionId} {
      allow read, delete: if isAdmin(request.auth.uid);
      allow create: if request.auth != null;
    }
    
    // Payment requests can be created by authenticated users, read/updated by admins.
    match /paymentRequests/{requestId} {
        allow read, update: if isAdmin(request.auth.uid);
        allow create: if request.auth != null;
    }
  }
}
    