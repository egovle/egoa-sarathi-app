
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAdmin() {
      // User must be authenticated and have an admin flag in their VLE profile.
      return request.auth != null && 
             exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    function isVle() {
        // User must be authenticated and exist in the 'vles' collection.
        return request.auth != null &&
               exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }

    function isOwner(userId) {
      // User must be authenticated and their UID must match the provided userId.
      return request.auth != null && request.auth.uid == userId;
    }
    
    // --- Collection Rules ---

    // USERS
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Allow users to update their own profile, but not their wallet balance.
      allow update: if isOwner(userId) && request.resource.data.walletBalance == resource.data.walletBalance;
      // Admins can update any field, including wallet balance.
      allow update: if isAdmin();
      // Users can't delete their own accounts from here.
      allow delete: if isAdmin();
      allow create: if isOwner(userId);
    }
    
    // VLES
    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin();
       // Allow VLEs to update their own profile, but not sensitive fields like status, admin flag, or wallet.
      allow update: if isOwner(vleId) && 
                       request.resource.data.isAdmin == resource.data.isAdmin &&
                       request.resource.data.status == resource.data.status &&
                       request.resource.data.walletBalance == resource.data.walletBalance;
      // Admins can update any field.
      allow update: if isAdmin();
      allow delete: if isAdmin();
      allow create: if isOwner(vleId);
    }
    
    // SERVICES
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
       allow create: if request.auth != null; // Notifications are created by the system on behalf of a user
       allow read, update, delete: if isOwner(resource.data.userId);
    }
    
    // PAYMENT REQUESTS
    match /paymentRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isAdmin();
    }

    // TASKS
    match /tasks/{taskId} {
      allow create: if request.auth != null;
      allow read: if isOwner(resource.data.creatorId) || 
                     isOwner(resource.data.assignedVleId) || 
                     isAdmin();
      allow update: if (isOwner(resource.data.assignedVleId) || isAdmin()) ||
                       (isOwner(resource.data.creatorId) && 
                         (request.resource.data.complaint != resource.data.complaint || 
                          request.resource.data.feedback != resource.data.feedback ||
                          request.resource.data.documents.size() > resource.data.documents.size())
                       );
      allow delete: if isAdmin();
    }
    
    // CAMPS (Official)
    match /camps/{campId} {
      // Any authenticated user can read camp information.
      allow read: if request.auth != null;
      // Only admins can create, update, or delete official camps.
      allow write: if isAdmin();
    }
    
    // CAMP SUGGESTIONS (New)
    match /campSuggestions/{suggestionId} {
        // A VLE can create a suggestion.
        allow create: if isVle() && isOwner(request.resource.data.suggestedBy.id);
        // Only admins can read, approve (by deleting), and reject (by deleting) suggestions.
        allow read, delete: if isAdmin();
    }
  }
}
