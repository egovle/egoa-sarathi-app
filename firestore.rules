rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getRole() {
      return get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      // Check if the user exists in the 'vles' collection and their isAdmin flag is true
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid))
          && get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // --- Public Collections ---
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /campSuggestions/{suggestionId} {
      allow read, delete: if isAdmin();
      allow create: if isSignedIn();
    }
    
    match /camps/{campId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
        
        // VLEs can update their own status in the assignedVles array
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assignedVles']);
    }

    // --- User-Specific Collections ---
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn();
    }
    
    match /vles/{vleId} {
      allow read, update, delete: if isOwner(vleId) || isAdmin();
      allow create: if isSignedIn();
    }
    
    match /government/{govId} {
      allow read, update, delete: if isOwner(govId) || isAdmin();
      allow create: if isSignedIn();
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if true; // Server-side creation
    }

    match /paymentRequests/{reqId} {
        allow create: if isSignedIn();
        allow read, update: if isAdmin();
    }

    // --- Core Task Logic ---
    match /tasks/{taskId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && (isOwner(resource.data.creatorId) || isOwner(resource.data.assignedVleId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(resource.data.creatorId) || isOwner(resource.data.assignedVleId) || isAdmin());
      allow delete: if isAdmin();
    }

    // --- Chat Collections ---
    match /taskChats/{taskId}/messages/{messageId} {
      allow read, create: if isSignedIn() && (
        isAdmin() ||
        isOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.creatorId) ||
        isOwner(get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId)
      );
    }
    
    match /campChats/{campId}/messages/{messageId} {
      allow read, create: if isSignedIn() && (
        isAdmin() ||
        // Check if user is an accepted VLE in the camp
        get(/databases/$(database)/documents/camps/$(campId)).data.assignedVles.hasAny([
          {'vleId': request.auth.uid, 'status': 'accepted'}
        ])
      );
    }

    match /groupChats/mainRoom/messages/{messageId} {
       allow read, create: if isSignedIn() && (
         // Allow if user is an admin or a VLE (but not a customer/gov)
         exists(/databases/$(database)/documents/vles/$(request.auth.uid))
       );
    }
  }
}
