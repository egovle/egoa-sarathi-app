
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user document exists in the 'vles' collection and has the isAdmin flag set to true.
      return isAuth() &&
             exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // --- Collection Rules ---

    // USERS: Customers can manage their own profile. Admins can manage any.
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, update: if isOwner(userId) || isAdmin();
      allow list: if isAdmin(); // Admins can list all users.
    }

    // VLES: VLEs can manage their own profile. Admins can manage any.
    match /vles/{vleId} {
      allow create: if isOwner(vleId);
      allow get, update: if isOwner(vleId) || isAdmin();
      allow list: if isAdmin(); // Admins can list all VLEs.
    }

    // TASKS: 
    match /tasks/{taskId} {
      // Any authenticated user can create a task.
      allow create: if isAuth();

      // GET/UPDATE: Allowed for creator, assigned VLE, or admin.
      allow get, update: if isAuth() && (
        isOwner(resource.data.creatorId) ||
        (resource.data.assignedVleId != null && isOwner(resource.data.assignedVleId)) ||
        isAdmin()
      );
      
      // LIST: Allow authenticated users to perform queries.
      // The query will only succeed if the 'get' rule above is satisfied for every document returned.
      // This allows secure queries like `where('creatorId', '==', auth.uid)`.
      allow list: if isAuth();
    }
    
    // SERVICES: All users can read, only admins can write.
    match /services/{serviceId} {
      allow read: if true; // read = get + list
      allow write: if isAdmin();
    }
    
    // CAMPS: All authenticated users can read, only admins can write.
    match /camps/{campId} {
      allow read: if isAuth(); // read = get + list
      allow write: if isAdmin();
    }
    
    // CAMP SUGGESTIONS: Any authenticated user can create. Only admins can read/delete.
    match /campSuggestions/{suggestionId} {
      allow create: if isAuth();
      allow read, delete: if isAdmin(); // read = get + list
    }
    
    // NOTIFICATIONS: Users can only access their own.
    match /notifications/{notificationId} {
      allow create: if isAuth(); // Logic is server-side.
      
      // GET/UPDATE/DELETE: allowed only for the owner of the notification
      allow get, update, delete: if isOwner(resource.data.userId);
      
      // LIST: Allow users to query for their own notifications.
      // The client-side query must contain `where('userId', '==', auth.uid)`.
      allow list: if isAuth();
    }
    
    // PAYMENT REQUESTS: Users create their own. Admins can read/update/list.
    match /paymentRequests/{reqId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isAdmin(); // read = get + list
    }
  }
}
