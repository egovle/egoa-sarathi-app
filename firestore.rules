
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function isAdmin() {
      // Check if the requesting user is an admin by looking at their VLE profile.
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    function isVle() {
      // Check if the requesting user is a VLE by their existence in the 'vles' collection.
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      // Check if the requesting user is the owner of the document.
      return request.auth.uid == userId;
    }

    // --- COLLECTION RULES ---

    // Users can read/update their own profile. Admins can read any.
    // Users cannot change their own wallet balance.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null;
      allow update: if isOwner(userId) && request.resource.data.walletBalance == resource.data.walletBalance;
    }
    
    // VLEs can read/update their own profile. Admins can read any.
    // VLEs cannot change their own wallet balance.
    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin();
      allow create: if request.auth != null;
      allow update: if isOwner(vleId) && request.resource.data.walletBalance == resource.data.walletBalance;
    }
    
    // Any authenticated user can read services. Only admins can write.
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Users can manage their own notifications.
    match /notifications/{notificationId} {
       allow create: if request.auth != null;
       allow read, update, delete: if isOwner(resource.data.userId);
    }

    // Camps are public to all authenticated users.
    // Admins can manage them. VLEs can ONLY create 'Suggested' camps.
    match /camps/{campId} {
      allow read: if request.auth != null;
      allow create: if isAdmin() || 
                       (isVle() && request.resource.data.status == 'Suggested');
      allow update, delete: if isAdmin();
    }
    
    // Users can create their own payment requests. Admins manage them.
    match /paymentRequests/{reqId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update: if isAdmin();
    }

    // Tasks have granular permissions based on role.
    match /tasks/{taskId} {
      allow create: if request.auth != null;
      
      allow read: if isOwner(resource.data.creatorId) || 
                     isOwner(resource.data.assignedVleId) || 
                     isAdmin();
                     
      allow update: if (isOwner(resource.data.assignedVleId) || isAdmin()) ||
                       (isOwner(resource.data.creatorId) && 
                         (request.resource.data.complaint != resource.data.complaint || 
                          request.resource.data.feedback != resource.data.feedback ||
                          // Allow document list to change
                          request.resource.data.documents.size() != resource.data.documents.size() ||
                          // Allow customer to pay for the task
                          request.resource.data.status == 'Unassigned')
                       );
    }
  }
}
