
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isApprovedVle() {
        return isAuth() && exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.status == 'Approved';
    }

    // --- Profile Collections ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth.uid == userId;
      // Allow updates by the owner OR an admin.
      // The owner cannot increase their own wallet balance. Admins can.
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.walletBalance <= resource.data.walletBalance);
    }
    
    match /vles/{vleId} {
      allow read: if isOwner(vleId) || isAdmin();
      allow create: if request.auth.uid == vleId;
      // Allow updates by the owner OR an admin.
      // The owner cannot increase their own wallet balance or approve themselves. Admins can do both.
      allow update: if isAdmin() || (isOwner(vleId) && 
                                     request.resource.data.walletBalance <= resource.data.walletBalance &&
                                     request.resource.data.status == resource.data.status);
    }

    // --- Task Collection ---
    match /tasks/{taskId} {
      // Read: Admins, the creator, or the assigned VLE.
      allow read: if isAuth() && (isAdmin() || 
                     resource.data.creatorId == request.auth.uid ||
                     resource.data.assignedVleId == request.auth.uid);
      
      // Create: Any authenticated user. The transaction logic in the app and the profile update rules provide the real security.
      allow create: if isAuth();

      // Update: Admins, the creator, or the assigned (and approved) VLE.
      allow update: if isAuth() && (isAdmin() ||
                       request.auth.uid == resource.data.creatorId ||
                       (request.auth.uid == resource.data.assignedVleId && isApprovedVle()));
    }

    // --- App Data Collections ---
    match /services/{serviceId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /camps/{campId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
    
    match /campSuggestions/{suggestionId} {
        allow read: if isAdmin();
        allow create: if isApprovedVle();
        allow delete: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, delete: if isOwner(resource.data.userId);
        allow create: if isAuth();
        allow update: if isOwner(resource.data.userId);
    }
    
    match /paymentRequests/{reqId} {
        allow read: if isAdmin() || isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isAdmin();
    }
  }
}
