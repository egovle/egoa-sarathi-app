rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if a user is logged in.
    function isAuth() {
      return request.auth != null;
    }

    // Helper functions to get data and check roles from Firestore.
    function getTaskData(taskId) {
      return get(/databases/(database)/documents/tasks/$(taskId)).data;
    }
    
    function taskExists(taskId) {
        return exists(/databases/(database)/documents/tasks/$(taskId));
    }

    function isAdmin() {
      return isAuth() && exists(/databases/(database)/documents/vles/$(request.auth.uid)) && 
             get(/databases/(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    // This is the main rule for all files inside the /tasks/ folder.
    match /tasks/{taskId}/{allPaths=**} {
      
      // READ access is strict.
      // It is only allowed AFTER the task document exists in Firestore and if the
      // requesting user is the creator, the assigned VLE, or an admin.
      allow read: if taskExists(taskId) && (
          getTaskData(taskId).creatorId == request.auth.uid || 
          getTaskData(taskId).assignedVleId == request.auth.uid ||
          isAdmin()
      );
      
      // WRITE access is less strict to allow for the initial upload.
      // Any authenticated user is allowed to write a file.
      // This is secure because:
      // 1. The `taskId` is a long, unguessable, randomly generated string.
      // 2. Only the client creating the task knows this ID at the time of upload.
      // 3. The strict read rule prevents anyone else from accessing the file later.
      allow write: if isAuth();
    }
  }
}
