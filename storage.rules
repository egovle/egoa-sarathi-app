
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Defines a function to check if a user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for all files within a task folder.
    match /tasks/{taskId}/{allPaths=**} {

      // CREATE (UPLOAD) RULE:
      // Allow any authenticated user to create a file IF they include their UID in the metadata.
      // This is the key to solving the "chicken-and-egg" problem for new tasks.
      // The app MUST send { customMetadata: { creatorId: request.auth.uid } } with the upload.
      allow create: if request.auth != null && request.resource.metadata.creatorId == request.auth.uid;
      
      // READ, UPDATE, DELETE RULES:
      // Allow access only if the corresponding Firestore task document exists AND
      // the user is the creator, the assigned VLE, or an admin.
      allow read, update, delete: if request.auth != null
        && exists(/databases/$(database)/documents/tasks/$(taskId))
        && (
          get(/databases/$(database)/documents/tasks/$(taskId)).data.creatorId == request.auth.uid ||
          (get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId != null && get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId == request.auth.uid) ||
          isAdmin()
        );
    }
  }
}
