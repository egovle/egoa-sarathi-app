
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if the requesting user is an Admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if the user created the task.
    function isCreator(taskId) {
      return get(/databases/$(database)/documents/tasks/$(taskId)).data.creatorId == request.auth.uid;
    }
    
    // Helper function to check if the user is assigned to the task.
    function isAssigned(taskId) {
      return get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId == request.auth.uid;
    }

    match /tasks/{taskId}/{allPaths=**} {
      // Allow any authenticated user to create (upload) files.
      // This is required because the task record might not exist in Firestore when the upload starts.
      // The application logic must handle creating the corresponding database record.
      allow create: if request.auth != null;

      // Allow read, update, and delete access only to the task creator, the assigned VLE, or an admin.
      // This rule requires that the task document already exists in Firestore.
      allow read, update, delete: if request.auth != null && (isAdmin() || isCreator(taskId) || isAssigned(taskId));
    }
  }
}
