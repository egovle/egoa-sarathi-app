
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if the user has rights to a specific task.
    function isAllowedOnTask(taskId) {
      let task = get(/databases/$(database)/documents/tasks/$(taskId)).data;
      let isCreator = request.auth.uid == task.creatorId;
      let isAssignedVle = task.assignedVleId != null && request.auth.uid == task.assignedVleId;
      
      // A user is allowed if they are the creator, the assigned VLE, or an admin.
      return isCreator || isAssignedVle || isAdmin();
    }
    
    // Match any file path inside the 'tasks' folder.
    match /tasks/{taskId}/{allPaths=**} {

      // --- CREATE (UPLOAD) RULE ---
      // This is the most important rule for fixing the upload error.
      // An authenticated user can create a file IF they attach metadata proving they are the creator.
      // The app logic is responsible for adding this metadata during the upload.
      allow create: if request.auth != null && request.resource.metadata.creatorId == request.auth.uid;

      // --- READ, UPDATE, DELETE RULES ---
      // These actions are only allowed AFTER the task document exists in Firestore.
      // A user can only perform these actions if they are the creator, assigned VLE, or an admin.
      allow read, update, delete: if request.auth != null && exists(/databases/$(database)/documents/tasks/$(taskId)) && isAllowedOnTask(taskId);
    }
  }
}
