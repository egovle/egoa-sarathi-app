
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // --- Helper Functions ---
    // Note: We cannot define reusable functions here like in Firestore,
    // so logic must be repeated or kept simple.

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isFileUploadOwner() {
      // Check the custom metadata set by the app during upload
      return request.auth.uid == request.resource.metadata.creatorId;
    }

    function hasTaskReadAccess(taskId) {
      let taskDoc = get(/databases/$(database)/documents/tasks/$(taskId));
      let isAdmin = exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
      
      return taskDoc.data.creatorId == request.auth.uid || 
             (taskDoc.data.assignedVleId != null && taskDoc.data.assignedVleId == request.auth.uid) ||
             isAdmin;
    }


    // --- Path Rules ---
    match /tasks/{taskId}/{fileName} {
      
      // Allow initial file uploads for a new task.
      // This rule relies on the app sending a `creatorId` in the file's metadata.
      // This solves the "chicken-and-egg" problem where the task document doesn't exist yet.
      allow create: if isUserAuthenticated() && isFileUploadOwner();

      // Allow reading and deleting files if the user has read access to the corresponding task document.
      allow read, delete: if isUserAuthenticated() && exists(/databases/$(database)/documents/tasks/$(taskId)) &&
                           hasTaskReadAccess(taskId);
    }
  }
}
