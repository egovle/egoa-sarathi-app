
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Match any file path for a task.
    match /tasks/{taskId}/{allPaths=**} {
      // Any authenticated user can upload a file.
      // The app is responsible for creating the corresponding database record.
      // This rule avoids the "chicken-and-egg" problem of needing a DB record to upload a file for it.
      allow create: if request.auth != null;

      // Only allow reading if the user is an admin, the task creator, or the assigned VLE.
      // We check that the corresponding task document exists in Firestore.
      allow read: if request.auth != null && exists(/databases/$(database)/documents/tasks/$(taskId)) && (
        (
          exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true
        ) ||
        get(/databases/$(database)/documents/tasks/$(taskId)).data.creatorId == request.auth.uid ||
        (
          get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId != null &&
          get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId == request.auth.uid
        )
      );

      // Allow updates and deletes under the same conditions as reading.
      allow update, delete: if request.auth != null && exists(/databases/$(database)/documents/tasks/$(taskId)) && (
        (
          exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true
        ) ||
        get(/databases/$(database)/documents/tasks/$(taskId)).data.creatorId == request.auth.uid ||
        (
          get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId != null &&
          get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedVleId == request.auth.uid
        )
      );
    }
  }
}
