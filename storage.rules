rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // This function checks if the requesting user is an admin.
    function isAdmin() {
      // Ensure the user exists in the 'vles' collection before trying to access its data.
      return exists(/databases/$(database)/documents/vles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/vles/$(request.auth.uid)).data.isAdmin == true;
    }

    match /tasks/{taskId}/{allPaths=**} {
      
      // Central permission check for an existing task.
      // A user can access a task's files if they are an admin, the task creator, or the assigned VLE.
      function canAccessTaskFiles() {
        // The task document must exist in Firestore to check permissions.
        if (!exists(/databases/$(database)/documents/tasks/$(taskId))) {
          return false;
        }
        
        let task = get(/databases/$(database)/documents/tasks/$(taskId));
        
        return isAdmin() || 
               request.auth.uid == task.data.creatorId || 
               (task.data.assignedVleId != null && request.auth.uid == task.data.assignedVleId);
      }

      // READ: Allow reading if the user has access.
      allow read: if request.auth != null && canAccessTaskFiles();

      // WRITE (create, update, delete):
      // Allow writing if it's an initial upload OR if the user has access to an existing task.
      allow write: if request.auth != null && (
          
          // Condition 1: Initial upload for a new task.
          // The client code MUST set 'creatorId' in the file's custom metadata.
          // This allows the upload before the database record exists.
          (request.resource.metadata.creatorId == request.auth.uid)
          
          ||
          
          // Condition 2: Any subsequent write (e.g., certificate upload, extra docs, deletion)
          // on an existing task.
          (canAccessTaskFiles())
      );
    }
  }
}
